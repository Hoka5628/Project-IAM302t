import pyshark
import requests
import hashlib
import os
import json
import csv
from collections import Counter
from urllib.parse import urlparse
import argparse


# Sử dụng API key trực tiếp (Không khuyến khích trong môi trường thực tế)
API_KEY = "9757125d16beef408ef8a57ea12e8933c959cc943309a7f205e8720b1259736a"
HEADERS = {"x-apikey": API_KEY}

def analyze_pcap(file_path):
    capture = pyshark.FileCapture(file_path, display_filter="ip")
    protocol_count = Counter()
    ip_set = set()
    url_set = set()
    sni_set = set()
    dns_queries = set()
    user_agents = set()
    http_requests = []

    for packet in capture:
        try:
            protocol = packet.highest_layer
            protocol_count[protocol] += 1

            if hasattr(packet, 'ip') and hasattr(packet.ip, 'dst'):
                ip_set.add(packet.ip.dst)

            if hasattr(packet, 'http') and hasattr(packet.http, 'host'):
                url = f"http://{packet.http.host}{packet.http.get('request_uri', '')}"
                url_set.add(url)
                if hasattr(packet.http, 'User_Agent'):
                    user_agents.add(packet.http.User_Agent)
                http_requests.append({
                    "Host": packet.http.host,
                    "User-Agent": packet.http.get('User-Agent', 'Unknown'),
                    "Referer": packet.http.get('Referer', 'Unknown'),
                    "URL": url
                })

            if hasattr(packet, 'tls') and hasattr(packet.tls, 'handshake_extensions_server_name'):
                sni_set.add(packet.tls.handshake_extensions_server_name)

            if hasattr(packet, 'dns') and hasattr(packet.dns, 'qry_name'):
                dns_queries.add(packet.dns.qry_name)

        except AttributeError:
            continue

    capture.close()

    print("\n[+] Protocol Analysis:")
    for protocol, count in protocol_count.items():
        print(f"{protocol}: {count} packets")

    check_suspicious_ips(ip_set)
    check_suspicious_urls(url_set)
    check_suspicious_domains(dns_queries)
    check_suspicious_sni(sni_set)

    save_report(protocol_count, ip_set, url_set, sni_set, dns_queries, user_agents, http_requests)

def vt_api_request(endpoint):
    try:
        response = requests.get(endpoint, headers=HEADERS)
        if response.status_code == 200:
            return response.json()
        else:
            print(f"[!] Lỗi API: {response.status_code}")
    except requests.RequestException as e:
        print(f"[!] Lỗi kết nối tới VirusTotal: {e}")

def check_suspicious_ips(ip_addresses):
    print("\n[+] Analyzing IPs on VirusTotal...")
    for ip in ip_addresses:
        url = f"https://www.virustotal.com/api/v3/ip_addresses/{ip}"
        result = vt_api_request(url)
        if result:
            malicious = result['data']['attributes']['last_analysis_stats']['malicious']
            if malicious > 0:
                print(f"[!] IP độc hại: {ip} (Malicious: {malicious})")

def check_suspicious_urls(urls):
    print("\n[+] Analyzing URLs on VirusTotal...")
    for url in urls:
        url_id = hashlib.sha256(url.encode()).hexdigest()
        vt_url = f"https://www.virustotal.com/api/v3/urls/{url_id}"
        result = vt_api_request(vt_url)
        if result:
            malicious = result['data']['attributes']['last_analysis_stats'].get('malicious', 0)
            if malicious > 0:
                print(f"[!] URL độc hại: {url} (Malicious: {malicious})")

def check_suspicious_domains(domains):
    print("\n[+] Analyzing DNS Queries on VirusTotal...")
    for domain in domains:
        url = f"https://www.virustotal.com/api/v3/domains/{domain}"
        result = vt_api_request(url)
        if result:
            malicious = result['data']['attributes']['last_analysis_stats'].get('malicious', 0)
            if malicious > 0:
                print(f"[!] Domain độc hại: {domain} (Malicious: {malicious})")

def check_suspicious_sni(snis):
    print("\n[+] Analyzing SNI on VirusTotal...")
    for sni in snis:
        url = f"https://www.virustotal.com/api/v3/domains/{sni}"
        result = vt_api_request(url)
        if result:
            malicious = result['data']['attributes']['last_analysis_stats'].get('malicious', 0)
            if malicious > 0:
                print(f"[!] SNI độc hại: {sni} (Malicious: {malicious})")

def save_report(protocol_count, ip_set, url_set, sni_set, dns_queries, user_agents, http_requests):
    report = {
        "protocol_count": dict(protocol_count),
        "ip_addresses": list(ip_set),
        "urls": list(url_set),
        "sni": list(sni_set),
        "dns_queries": list(dns_queries),
        "user_agents": list(user_agents),
        "http_requests": http_requests
    }

    with open("malware_analysis_report.json", "w") as f:
        json.dump(report, f, indent=4)

    with open("malware_analysis_report.csv", "w", newline="") as csvfile:
        csvwriter = csv.writer(csvfile)
        csvwriter.writerow(["Category", "Data"])

        for key, values in report.items():
            if isinstance(values, list):
                for value in values:
                    csvwriter.writerow([key, value])
            else:
                csvwriter.writerow([key, values])

    print("\n[+] Báo cáo đã lưu trong malware_analysis_report.json và malware_analysis_report.csv")

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="PCAP Malware Analysis Tool")
    parser.add_argument("pcap_file", type=str, help="Đường dẫn đến file pcap")
    args = parser.parse_args()

    analyze_pcap(args.pcap_file)